#change columns
import os
import tushare as ts
import pandas as pd
import datetime
import time
import numpy as np

start_date = '2020-11-06'
end_date = '2020-12-06'
st = '20201106'
et = '20201206'
data_path = os.path.abspath(os.path.dirname(os.path.dirname(__file__)))+'/stockdata/'
daily_df = pd.read_csv(data_path+'new_daily20200101-20201206_source.csv')
daily_df = daily_df[daily_df['trade_date']>=start_date]
daily_df = daily_df[daily_df['trade_date']<=end_date]
daily_df.to_csv(data_path+'daily'+st+'_'+et+'_source.csv',index=False)

# -*- coding: utf-8 -*-
"""
Created on Tue Nov 19 16:32:22 2019

改动：增加前22个交易日的涨幅信息作为筛选
测！！最优！！参数组合

-----------------------------
在ver9上的基础改动之处：
对不正常的均价进行了处理
有三种选法
1-用最高最低的平均值
2-用开盘收盘的平均值
3-用这四个值得平均值

然后由于成交量 我们得数据都是原始数据 没有经过复权处理得
所以现在 最简单的方式：除权的股票当天不进行选择范围
-----------------------------
在现今效果最好的版本上面改进--精简版


这个主要就是分析数据--把固定属性都放松
之前观察到换手率还是有影响的 所以保存换手率
与最高价差也关系到买入价格设定 所以保存

现在只考虑静态的
但是增加一些筛选条件
1.前五天的涨幅 不能太高 也不能太少  3-20
2.单价 大于5小于50

现在卖出策略变动更大
变成 卖出价格跟买入价有关系而且跟卖出当天开盘价有关系
OP>=BP: 开盘价>=买入价
    LB = max{BP, OP+a*BP}
    UB = min{BP+c*BP,OP+b*BP}
OP<BP: 开盘价<买入价
    LB = OP+a*BP
    UB = max{BP,OP+b*BP}
    
分情况讨论：
初始参数设定 之后还要调参
总市值 >= 100时：
a = -0.5%  b=4%
总市值 < 100时：
a = -0.4%  b=5%
当买入价格<=30时：
d_price = 1.05
a = a*1.05 b=b*1.05

买入策略变简单：
不买的情况 --
1.当天价格一直高于昨日收盘 的 1.01
2.当天的价格一直低于 昨日收盘的 0.98

买入的情况：
3.当天开盘 处于 昨日收盘的 0.98 到  昨日收盘 的 1.01 之间
4.当天开盘高于 昨日收盘 的 1.01 但是后来降低到 昨日收盘 的 1.01
5.当天开盘低于 昨日收盘的 0.98 但后来涨到 昨日收盘的 0.98

由于原来的买入策略更加好
所以在原来策略上改进

新引入减少回撤的策略
#1.在股票数<10时 不进行股票购买操作
#2.每支股票的最大购买金额为5万元
#这些值都设为参数
#
#先不考虑金额  将股票数下限设为5
#然后结合时间来考虑
#如果当天的利润 <-0.01
#则第二天不进行买入
#以此类推
（以上暂未考虑 只考虑了预警机制）

加入动态变化的预警机制
如果 当天股票个数<10且 利润<-0.01/-0.005（设为参数） 进入预警期
但是如果遇到大于10的股票数的日期 则跳出预警期
入股处在预警期的时间比较长，则最小股票数（10）变大

预警期：就是股票数小于（最小股票数）10时 直接不进行购买

引进高级预警机制：(随时可以进入 不管是不是在警戒状态)
连续5天的利润之和 低于-10%（若没有买入 我们便当这天利润为-3%） 我们便进入高级预警状态
只模拟买入 不真正的操作 到真正的盈利
再转到预警模式
